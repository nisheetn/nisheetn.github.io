-- VVV DO NOT MODIFY THESE VVV
-- (Unless you know what you're doing)
import Set exposing (Set)
import Plane3d

-- Data type for representing different kinds of modules
type ModuleType
  = Housing
  | Medical
  | Recreation
  | Custom (Object BodyCoordinates)

-- Each node stores its ID, position on the global coordinate system, and its module type.
type alias Node =
  { id : Int
  , position : Point3d Meters WorldCoordinates
  , nodeType : ModuleType
  }

-- A City is a graph made up of nodes and their connections.
-- Connections are represented as a set of IDs, to remove redundant connections.
type alias City = List (Node, Set Int)

-- This function loops through the given cityGraph and renders the nodes as modules.
buildModules : City -> Model -> List (Body PhysicsData)
buildModules cityGraph model =
  List.map
    ( \ (node, _) ->
      let
        pos = (Point3d.xCoordinate node.position, Point3d.yCoordinate node.position, Point3d.zCoordinate node.position)
      in
        case node.nodeType of
          Housing ->
            house model
              |> usePhysics "houseModule"
              |> addTag "housing"
              |> startAtPos pos
          Medical ->
            medical model
              |> usePhysics "medModule"
              |> addTag "medical"
              |> startAtPos pos
          Recreation ->
            recreation model
              |> usePhysics "recModule"
              |> addTag "recreation"
              |> startAtPos pos
          Custom obj ->
            obj
              |> usePhysics "customModule"
              |> addTag "customModule"
              |> startAtPos pos
    )
    cityGraph

-- This function loops through the given cityGraph
-- and renders the connections between nodes.
-- It is considerably more complex than the function
-- for rendering the nodes themselves.
buildConnections : City -> Model -> List (Body PhysicsData)
buildConnections cityGraph model =
  -- Loop through the list and render connections
  List.map
    ( \ (node, connections) ->
      let
        -- Get the list of nodes connected to this one
        connectedNodes =
          List.filter
            ( \ (otherNode, _) ->
              Set.member otherNode.id connections
            )
            cityGraph
            |> List.map ( \ (otherNode, _) -> otherNode)
        -- Extract positions. Could probably have been combined
        -- with the above local variable
        connectedPositions =
          List.map
            ( \ otherNode ->
              otherNode.position
            )
            connectedNodes
        -- The physics library is very finicky with local and global coordinate systems
        -- This just converts the global node positions to a local one.
        bodyPos = node.position |> Point3d.relativeTo Frame3d.atOrigin
        -- A list of directions from this node to its connected nodes
        directions =
          List.map
            ( \ pos ->
              Maybe.withDefault Direction3d.z
                (Direction3d.from bodyPos (pos |> Point3d.relativeTo Frame3d.atOrigin))
            )
            connectedPositions
        -- Distances between this node and its connected nodes
        -- Distances are adjusted somewhat to allow for the arrow to show up
        lengths =
          List.map
            ( \ pos ->
              Point3d.distanceFrom node.position pos
                |> Quantity.minus (Length.meters 1)
            )
            connectedPositions
        -- Zip the direction and length lists together
        arrowData =
          List.map2 Tuple.pair directions lengths
      in
        group3D
          ( List.map
              ( \ (dir, len) ->
                arrowStartingAt
                  bodyPos -- Arrow starts at this node...
                  dir -- ...and points to a connected node
                  { radius = Length.centimeters 10, length = len }
                  |> matte Color.white
                  -- Connections shouldn't cause collisions due to a bug
              )
              arrowData
          )
          |> noCollide
          |> usePhysics ("node" ++ String.fromInt node.id ++ "connections")
    )
    cityGraph

-- Combines buildModules and buildConnections
buildCity cityGraph model =
  buildModules cityGraph model ++ buildConnections cityGraph model

-- Function to make creating nodes a bit easier.
-- You technically don't need to use it, but you might find it helpful.
buildNode : Int -> Point3d Meters WorldCoordinates -> ModuleType -> Node
buildNode id pos moduleType =
  { id = id
  , position = pos
  , nodeType = moduleType
  }
-- ^^^ DO NOT MODIFY THESE ^^^
  
-- VVV YOU MAY MODIFY THESE VVV

-- These will be used to actually render the different module types.
-- If you change the name or type signature (e.g. by adding parameters),
-- you will also need to modify any references to them, so be careful.
house model =
  group3D
    [ box 150 100 70
        |> matte Color.lightBrown,
      customPolygon [(-50,0),(50,0),(0,30),(-50,0)]
        |> matte Color.lightBrown
        |> rotate3D 0 (degrees 90) (degrees 90)
        |> move3D (-75,0,35),
      customPolygon [(-50,0),(50,0),(0,30),(-50,0)]
        |> matte Color.lightBrown
        |> rotate3D 0 (degrees 90) (degrees 90)
        |> move3D (75,0,35),
      polyCylinder roofpoints 160 model.meshStore
        |> plastic Color.black 0.3
        |> rotate3D 0 (degrees 90) (degrees 90)
        |> move3D (-80,0,35),
      square3D 30
        |> matte Color.black
        |> rotate3D 0 0 (degrees 90)
        |> move3D (35,-51,0),
      square3D 30
        |> matte Color.black
        |> rotate3D 0 0 (degrees 90)
        |> move3D (-35,-51,0),
      square3D 30
        |> matte Color.black
        |> rotate3D 0 0 (degrees 90)
        |> move3D (35,51,0),
      square3D 30
        |> matte Color.black 
        |> rotate3D 0 0 (degrees 90)
        |> move3D (-35,51,0),
      rectangle3D 50 30
        |> matte Color.black 
        |> rotate3D (degrees 90) 0 0
        |> move3D (-76,-25,-10)
     
    ]
roofpoints =   [(-50,0),(0,30),(50,0),(60,0),(0,40),(-60,0),(-50,0)]
medical model = group3D
                [box 50 80 120
                    |> matte Color.white   
                    |> move3D(0,0, 50)
                  ,window|> move3D (-25,0,70)
                  ,window|> move3D (-25,15,70)
                  ,window|> move3D (-25,-15,70)
                  ,window|> move3D (-25,-30,70)
                  ,window|> move3D (-25,30,70)
                  ,window|> move3D (-25,0,50)
                  ,window|> move3D (-25,15,50)
                  ,window|> move3D (-25,-15,50)
                  ,window|> move3D (-25,-30,50)
                  ,window|> move3D (-25,30,50)
                  
                  ,window|> move3D (25,0,70)
                  ,window|> move3D (25,15,70)
                  ,window|> move3D (25,-15,70)
                  ,window|> move3D (25,-30,70)
                  ,window|> move3D (25,30,70)
                  ,window|> move3D (25,0,50)
                  ,window|> move3D (25,15,50)
                  ,window|> move3D (25,-15,50)
                  ,window|> move3D (25,-30,50)
                  ,window|> move3D (25,30,50)
                  
                   ,window|> rotate3D 0 -300 0|> move3D (-15,-40,70)
                   ,window|> rotate3D 0 -300 0|> move3D (0,-40,70)
                   ,window|> rotate3D 0 -300 0|> move3D (15,-40,70)
                   ,window|> rotate3D 0 -300 0|> move3D (-15,-40,50)
                   ,window|> rotate3D 0 -300 0|> move3D (0,-40,50)
                   ,window|> rotate3D 0 -300 0|> move3D (15,-40,50)
                   
                   ,window|> rotate3D 0 -300 0|> move3D (-15,40,70)
                   ,window|> rotate3D 0 -300 0|> move3D (0,40,70)
                   ,window|> rotate3D 0 -300 0|> move3D (15,40,70)
                   ,window|> rotate3D 0 -300 0|> move3D (-15,40,50)
                   ,window|> rotate3D 0 -300 0|> move3D (0,40,50)
                   ,window|> rotate3D 0 -300 0|> move3D (15,40,50)
                  
                  ,box 1 70 15
                      |> matte Color.white 
                      |> move3D (-25,0,90)
                  ,box 1 70 15
                      |> matte Color.white 
                      |> move3D (25,0,90)
                 ,door|> move3D (0,-4,-10)
                 ,door|> move3D (50,-4,-10)
                 ,redcross1 model
                 ,redcross2 model
                ] |> scale3D 2
window = 
        group3D
           [box 1 15 15
                |> matte Color.darkBlue  
     ,cylinder 0.75 (15 + 1.375)
        |> matte Color.black
        |> move3D (0, -7.5, 0)
        |> scale3D 0.7
    , cylinder 0.75 (15 + 1.375)
        |> matte Color.black
        |> move3D (0, 7.5, 0)
        |> scale3D 0.7
    , cylinder 0.75 (15 + 1.375)
        |> matte Color.black
        |> rotate3D 0 0 (degrees 90)
        |> move3D (0, 0, 7.5)
        |> scale3D 0.7
    , cylinder 0.75 (15 + 1.375)
        |> matte Color.black
        |> rotate3D 0 0 (degrees 90)
        |> move3D (0, 0, -7.5)
        |> scale3D 0.7
        ]
door = group3D
           [box 1 15 30
                      |> matte Color.black  
                      |> move3D (-25,10,15)
             ,box 1 15 30
                      |> matte Color.black  
                      |> move3D (-25,-6,15) 
             ]
crosspoints = [(-2.022,-6.533),(1.2132,-6.533),(5.6619,-5.927),(5.6619,-6.331),(5.6619,1.5545),(14.154,1.3522),(14.559,-6.129),(22.041,-6.533),(22.041,-15.02),(14.357,-15.43),(14.357,-22.50),(5.6619,-22.91),(5.6619,-15.63),(-1.618,-14.77),(-2.022,-6.533)]
redcross1 model = polyCylinder crosspoints 1 model.meshStore|>plastic Color.red 0.3|>scale3D 0.5|> rotate3D -300 0 0|>move3D (-26,7,93)
redcross2 model = polyCylinder crosspoints 1 model.meshStore|>plastic Color.red 0.3|>scale3D 0.5|> rotate3D -300 0 0|>move3D (26,7,93) 
recreation model =
  group3D
    [ 
      square3D 50 -- lawn, remove if you want 
      |> matte Color.green
      |>scale3D 5,
      cylinder 0.6 100
      |> matte Color.black 
      |> rotateY3D (degrees 15)
      |> move3D(-10,73,48),
      cylinder 0.6 100 
      |> matte Color.black 
      |> rotateY3D (degrees -15)
      |> move3D(16,73,48),
      cylinder 0.6 120 
      |> matte Color.black
      |> rotateX3D( degrees 90)
      |> move3D(3,13,95),
      cylinder 0.6 100
      |> matte Color.black 
      |> rotateY3D (degrees 15)
      |> move3D(-10,-48,48),
      cylinder 0.6 100 
      |> matte Color.black 
      |> rotateY3D (degrees -15)
      |> move3D(16,-48,48),
      cylinder 0.6 70
      |> matte Color.black 
      |> rotateY3D (degrees 15)
      |> move3D(-6,30,60),
      rectangle3D 10 35 
      |>matte Color.lightBrown
      |> rotateY3D (degrees -25) 
      |>move3D(-14,13,28),
      cylinder 0.6 70
      |> matte Color.black 
      |> rotateY3D (degrees 15)
      |> move3D(-6,-4,60)
   
    ] 
swingpoints =  [(1.6440,18.950),(-2.583,-21.91),(4.2275,-21.44),(6.8110,-14.16),(7.7504,-12.28),(8.6899,-11.34),(10.099,-11.34),(13.622,-11.11),(18.319,-11.58),(19.258,-11.58),(20.667,-12.52),(21.372,-13.22),(21.607,-15.10),(21.607,-17.92),(21.372,-20.27),(21.137,-23.55),(20.667,-25.67),(19.258,-27.31),(17.379,-28.49),(15.735,-29.43),(13.622,-30.60),(11.273,-30.60),(8.2201,-30.37),(5.1669,-29.66),(3.0532,-28.96),(0,-28.02),(-1.878,-27.31),(-3.992,-24.73),(-2.818,-21.21),(0.4697,-25.67),(5.6366,-25.20),(11.508,-25.90),(13.856,-25.67),(15.031,-23.55),(17.614,-22.62),(19.023,-22.62),(21.137,-22.62),(21.607,-21.68),(18.788,18.480),(17.849,-21.91),(18.084,-18.39),(15.735,-19.09),(13.856,-19.33),(9.3944,-18.39),(9.1596,-18.15),(6.1064,-16.51),(6.8110,-13.46),(1.6440,18.950)]
-- This is your city.
-- For the Underwater Recursion lab, remember that it should be algorithmically generated.
myCity model =
  cityCreator model 20
  
cityCreator model n =
  let
    num =
      if n > 2 then
        n
      else
        3
  in
    cityRecursive model num [] num
    
cityRecursive model n cities max = 
    if n < 1 then
      cities
    else
      cityRecursive
        model
        (n - 1)
        ( ( buildNode n (Point3d.meters ( if modBy 2 n == 1 then toFloat (2*(n-1))
                                          else toFloat (2*n - 2)) 
                                        ( if modBy 2 n == 1 then 0
                                          else (sqrt 3) * (-2)) 
                                         2) 
          ( if modBy 4 n == 1 then Housing 
            else if modBy 4 n == 3 then Recreation 
            else Medical )
          , Set.fromList (connetCondition n 1 max) 
          ) :: cities
        )
        max 


connetCondition n min max = 
   if n == min then [n+1, n+2] 
   else 
     if n == max then 
       if modBy 2 max == 0 then [n-1] 
       else [n-1,n-2]
     else 
       if modBy 2 n == 0 then [n-1, n+1] 
       else  
           if n + 1 == max then [n-2,n-1,n+1] 
           else [n-2, n-1, n+1 , n+2]
           
-- Put your physics objects here!
myPhysicsObjects model =
    let
        useTexture = getTexture model.textureLoader.textures
    in
        [ 
        ] ++ buildCity (myCity model) model

-- Put your update functions here! Try using "pushIf" or "updateIf"
myPhysicsUpdates : Model -> List (Body PhysicsData -> Body PhysicsData)
myPhysicsUpdates model =
    [ 
    ]
{-| Define your submarine here. Note that animations will not work. -}
--submarineEntity : Model -> Object BodyCoordinates
submarineEntity model =

    group3D
      [ ellipsoid 80 50 30 model.meshStore
           |> matte Color.red
           ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 180)
          |> move3D (0,0,30)
          |> noCollide,
          ring 5 5 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 180)
          |> move3D (0,0,40)
          |> noCollide
      ,cylinder 10 15
          |> matte Color.yellow
          |> rotateX3D (degrees 180)
          |> move3D (0,0,30)
          |> noCollide,cylinder 5 15
          |> matte Color.yellow
          |> rotateX3D (degrees 180)
          |> move3D (0,0,50)
          |> noCollide,
          cylinder 5 5
          |> matte Color.lightBlue
          |> rotateX3D (degrees 90)
          |> move3D (3,0,50)
          |> noCollide

      ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 120)
          |> move3D (31,43,14)
          |> noCollide
      ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 120)
          |> move3D (0,45,14)
          |> noCollide
      ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 120)
          |> move3D (-32,43,14)
          |> noCollide
      ,cylinder 10 2
          |> matte Color.lightBlue
          |> rotateX3D (degrees 120)
          |> move3D (32,43,14)
          |> noCollide
      ,cylinder 10 2
          |> matte Color.lightBlue
          |> rotateX3D (degrees 120)
          |> move3D (-0,45,14)
          |> noCollide
      ,cylinder 10 2
          |> matte Color.lightBlue
          |> rotateX3D (degrees 120)
          |> move3D (-32,43,14)
          |> noCollide
     
      ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 55)
          |> move3D (32,-41,14)
          |> noCollide
      ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 60)
          |> move3D (-0,-44,14)
          |> noCollide
      ,ring 10 1 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 60)
          |> move3D (-30,-44,14)
          |> noCollide
      ,cylinder 10 2
          |> matte Color.lightBlue          |> rotateX3D (degrees 55)
          |> move3D (32,-41,14)
          |> noCollide
      ,cylinder 10 2
          |> matte Color.lightBlue
          |> rotateX3D (degrees 60)
          |> move3D (-0,-44,15)
          |> noCollide
      ,cylinder 10 2
          |> matte Color.lightBlue
          |> rotateX3D (degrees 60)
          |> move3D (-30,-44,15)
          |> noCollide

      ,polyCylinder [(-78,41),(-75,-14),(0,0),(0,0)] 3 model.meshStore
          |> matte Color.black
          |> rotateX3D (degrees 90)
          |> move3D (-5,0,-10)
          |> scale3D 1
          |> noCollide

          ,cylinder 2 15
          |> matte Color.grey
          |> rotateY3D (degrees 270)
          |> move3D (-80,0,0)   
          ,polyCylinder [(-78,41),(-75,-14),(0,0),(0,0)] 3 model.meshStore
          |> matte Color.grey
          |> rotateX3D (degrees 90)
          |> rotateY3D (degrees -10)
          |> move3D (-120,0,0)
          |> scale3D 0.5
          |> noCollide
      ,polyCylinder [(-78,41),(-75,-14),(0,0),(0,0)] 3 model.meshStore
          |> matte Color.grey
          |> rotateX3D (degrees 180)
          |> move3D (-120,10,0)
          |> scale3D 0.5
          |> noCollide 
          
      ]


subStartingPos : (Length, Length, Length)
subStartingPos = (Length.meters 0, Length.meters 0, Length.meters 10)

-- I don't recommend turning this on for these labs.
useGravity = False

-- Set this to true show position, velocity, and force visualizers for ALL bodies
showPhysicsVisualizers = False

-- Distance that the camera moves when you click the buttons in the top right corner
cameraMoveDistance = Length.centimeters 25

collision_meter x y z =  
     case x of 
       start :: end -> 
           if (Length.inMeters (Point3d.distanceFrom y (Tuple.first start).position)) <= 5 then collision_meter end y True  else collision_meter end y z      
       [] -> z
-- move / edit the light
light =
    pointLight
        { position = Point3d.centimeters 0 0 100    -- position of the light
        , chromaticity = Light.sunlight             -- the colour of the light (see https://package.elm-lang.org/packages/ianmackenzie/elm-3d-scene/latest/Scene3d-Light#Chromaticity)
        , intensity = LuminousFlux.lumens 10000     -- how intense the light is
        }
showLight = True -- whether to show the light ball or not

-- Use "loadTexture [name] [url]" to load in texture images from the Internet!
-- Give each one a unique name.
-- You can list many of them!
myTextures = 
    [ loadTexture "example" "Put an image URL here!"
    ]

-- Usage: `svgTexture "name" "name`, where shape is any 2D shape or group
-- Give each one a unique name.
-- You can list many of them!
svgTextures =
    [ svgTexture "squares" squares
    ]

-- SVG textures are 50 by 50
squares =
    group
    [
        square 25 |> filled purple |> move (12.5,12.5)
    ,   square 25 |> filled orange |> move (-12.5,12.5)
    ,   square 25 |> filled purple |> move (-12.5,-12.5)
    ,   square 25 |> filled orange |> move (12.5,-12.5)
    ]


-- Put your 2D shapes here, and they will be overlayed on top of the screen!
overlay : Model -> List (Shape Msg)
overlay model =
    [ submarineHUD model

    ]
maybeChecker : a -> Maybe a -> a
maybeChecker x y = case y of 
                       Just beta -> beta
                       Nothing -> x
                          
-- This is the Heads-Up Display for the submarine.
submarineHUD model =
  let
    -- Set up some useful variables and data
    subMaybe = getBodyByName "submarine" model.world
    colour = hsl (degrees 155) 1 0.2
    colourHighlight = hsl (degrees 180) 1 0.3
    subPos =
      subMaybe
        |> Maybe.map Body.frame
        |> Maybe.withDefault Frame3d.atOrigin
        |> Frame3d.originPoint
    subX =
      subMaybe
        |> Maybe.map (Body.frame)
        |> Maybe.withDefault Frame3d.atOrigin
        |> Frame3d.xDirection
    subY =
      subMaybe
        |> Maybe.map (Body.frame)
        |> Maybe.withDefault Frame3d.atOrigin
        |> Frame3d.yDirection
    subZ =
      subMaybe
        |> Maybe.map (Body.frame)
        |> Maybe.withDefault Frame3d.atOrigin
        |> Frame3d.zDirection
    screenWidth =
      toFloat (unwrapQ model.width)
    screenHeight =
      toFloat (unwrapQ model.height)
    -- Define HUD elements
    hudAltitude =
      let
        altitude =
          subPos
            |> Point3d.zCoordinate
            -- The actual floor is 1 meter below the origin.
            |> Quantity.plus (Length.meters 1)
            |> Length.inMeters
      in
        text ("ALTITUDE: " ++ Round.round 2 altitude ++ "m")
          |> customFont "Audiowide"
          |> centered
          |> size 16
          |> filled colour
    speedhud =
      let
        speed = Speed.inMetersPerSecond (Vector3d.length (maybeChecker (Vector3d.zero) (subMaybe |> Maybe.map Body.velocity))) 

      in
        text ("VELOCITY: " ++ Round.round 2 (speed) ++ "km/h")
          |> customFont "Audiowide"
          |> centered
          |> size 16
          |> filled colour
    hudPitch =
      let
        sidePlane =
          SketchPlane3d.unsafe
            { originPoint = subPos
            , xDirection =
                subX
                  |> Direction3d.projectOnto Plane3d.xy
                  |> Maybe.withDefault subX
            , yDirection = Direction3d.z
            }
        angle =
          subX
            |> Direction3d.azimuthIn sidePlane
            |> Angle.inRadians
        thickness = solid 2
        radius = 75
      in
        group
          [ circle radius
              |> outlined thickness colour
          , polygon [(0, 65), (-15, -30), (0, 0), (15, -30), (0, 65)]
              |> filled colour
              |> rotate (angle - (degrees 90))
          , triangle 10
              |> filled colour
              |> rotate (degrees 180)
              |> move (radius - 5, 0)
          , triangle 10
              |> filled colour
              |> rotate (degrees -90)
              |> move (0, radius - 5)
          , triangle 10
              |> filled colour
              |> rotate (degrees 90)
              |> move (0, -radius + 5)
          , text "UP"
              |> customFont "Audiowide"
              |> centered
              |> size 24
              |> filled colourHighlight
              |> move (0, radius + 10)
          , text "PITCH"
              |> customFont "Audiowide"
              |> centered
              |> size 16
              |> filled colour
              |> move (0, -radius - 20)
          ]
    -- Essentially a compass
    hudYaw =
      let
        angle =
          subX
            |> Direction3d.azimuthIn SketchPlane3d.xy
            |> Angle.inRadians
        thickness = solid 2
        radius = 75
      in
        group
          [ circle radius
              |> outlined thickness colour
          , polygon [(0, 65), (-15, -30), (0, 0), (15, -30), (0, 65)]
              |> filled colour
              |> rotate angle
          , triangle 10
              |> filled colour
              |> rotate (degrees -90)
              |> move (0, radius - 5)
          , text "N"
              |> customFont "Audiowide"
              |> centered
              |> size 24
              |> filled colourHighlight
              |> move (0, radius + 10)
          , text "YAW"
              |> customFont "Audiowide"
              |> centered
              |> size 16
              |> filled colour
              |> move (0, -radius - 20)
          ]
    -- Reading the roll value is considerably more difficult than yaw.
    -- Here, we are drawing a 2D plane facing forward, calculating the angle by
    -- getting the azimuth of the submarine Y-direction's projection onto that plane
    hudRoll =
      let
        -- A plane whose normal direction is the sub's forward direction
        forwardPlane =
          SketchPlane3d.unsafe
            { originPoint =
                subPos
            , xDirection =
                subX
                  |> Direction3d.rotateAround Axis3d.z (Angle.degrees 90)
            , yDirection =
                Direction3d.z
            }
        -- The angle used for the roll meter is just the horizontal angle of the direction vector
        -- on the forward-facing plane
        angle =
          subY
            |> Direction3d.azimuthIn forwardPlane
            |> Angle.inRadians
            |> negate
        thickness = solid 2
        radius = 150
      in
        group
          [ group -- The roll meter that rotates with the submarine.
              [ circle radius
                  |> outlined thickness colour
                  |> clip (rectangle (radius * 3) (radius * 2) |> ghost |> move (0, radius))
              , line (-radius - 25, 0) (-radius + 25, 0)
                  |> outlined thickness colour
              , line (-radius - 20, -10) (-radius + 20, -10)
                  |> outlined thickness colour
              , line (radius - 25, 0) (radius + 25, 0)
                  |> outlined thickness colour
              , line (radius - 20, -10) (radius + 20, -10)
                  |> outlined thickness colour
              , triangle 10
                  |> filled colour
                  |> rotate (degrees 90)
                  |> move (0, radius + 5)
              , triangle 10
                  |> filled colour
                  |> rotate (degrees -90)
                  |> move (0, -radius - 5)
              , line (-25, -radius) (25, -radius)
                  |> outlined thickness colour
              , line (-20, -radius + 10) (20, -radius + 10)
                  |> outlined thickness colour
              ]
              |> rotate angle
          -- A static indicator so you know where the neutral state is.
          , group 
              [ triangle 10
                  |> filled colour
                  |> rotate (degrees -90)
              , line (-25, 0) (25, 0)
                  |> outlined thickness colour
                  |> move (0, 5)
              ]
              |> move (0, radius + 25)
          , text "ROLL"
              |> customFont "Audiowide"
              |> centered
              |> size 16
              |> filled colour
              |> move (0, radius + 40)
          ]
  in
    group
      [ hudAltitude
          |> move (0, screenHeight / 2 - 50)
      , hudPitch
          |> move (-screenWidth / 2 + 150, -screenHeight / 2 + 150)
      , hudYaw
          |> move (screenWidth / 2 - 150, -screenHeight / 2 + 150)
       
      , hudRoll
     , speedhud
          |> move (12, screenHeight / 2 - 20),
          let x =collision_meter 
              y= myCity model
             in 
         if (x y subPos False) then
          text "ALERT:Collision Detected" 
          |> customFont "Audiowide" 
          |> centered 
          |> size 20
          |> filled green
       else
         group []
          
      ]

skyboxType =
    Skybox.URLSkybox textureBottom textureTop textureSide1 textureSide2 textureSide3 textureSide4

textureBottom : String
textureBottom =
    "Put an image URL here!"

textureTop : String
textureTop =
    "Put an image URL here!"

textureSide1 : String
textureSide1 =
    "Put an image URL here!"

textureSide2 : String
textureSide2 =
    "Put an image URL here!"

textureSide3 : String
textureSide3 =
    "Put an image URL here!"

textureSide4 : String
textureSide4 =
    "Put an image URL here!"
